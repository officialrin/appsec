## PART 1
1. attack 1 – XSS exploit
* Info: The inclusion of the “safe” tag removes the default XSS protection from Django because this tag is only used on data that is known to be safe. Therefore, an script tag can be executed by navigating to the URL [http://127.0.0.1:8000/gift?director=<script>alert("You've won a free gift card!")</script>]. This will show the user a pop-up message at the aforementioned URL.
* Fix: The “safe” tag can be removed from all instances within the html files, restoring the default XSS protection by changing {{director|safe}} to {director}. A “safe” tag was removed from gift.html and item-single.html to restore XSS protection.

2. attack 2 – CSRF gift
* Info: This is another case of default Django protections being removed from the html code. In this case, the lack of CSRF tokens allowed the “form” tags to be exploited and a “post” request to be sent to the webpage with made-up values. The attacker can input a value for the gift card and their account details, allowing them to gift a gift card of any value to themselves.
* Fix: This attack can be mitigated by adding the CSRF tokens mentioned before. The tag 
{% csrf_token %} can be added to lines where the “post” tag is used. This prevents attackers from exploiting the post requests. Django also has CSRF protections that can be added using ‘django.middleware.csrf.CsrfViewMiddleware’ to the settings.py file. The tag {% csrf_token %} was added to four files: gift.html, login.html, register.html, and use-card.html.

